plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
    id("com.gradleup.shadow") version "9.0.0-beta16" // 最新 beta 版本已支持 Java 21+
    id "org.jetbrains.kotlin.jvm" version "2.1.20"
    id "org.jetbrains.kotlin.plugin.serialization" version "2.1.20"
}


tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    mavenLocal()
    maven {
        name = 'Paper'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }

    maven {
        name = "kotlin official maven"
        url = uri("https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev/")
    }


    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }

    maven {
        name = 'Spigot'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        url "https://maven.impactdev.net/repository/development/"
    }
    maven {
        url "https://maven.neoforged.net/releases/"
    }
    maven {
        url = uri("https://cursemaven.com")
        content {
            includeGroup("curse.maven")
        }
    }
    maven { url "https://api.modrinth.com/maven" }

}

base {
    archivesName = mod_id
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": "1.0.0"
    }
}


java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {

    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()


            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {

            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {

    additionalRuntimeClasspath(implementation("mysql:mysql-connector-java:8.0.33"))
    jarJar("mysql:mysql-connector-java:8.0.33") {
        version {
            strictly("[8.0,)")
            prefer("8.0.33")
        }
    }

    var exposedVersion = "0.61.0"

    var exposedRange = "[0.48.0,)"

    var exposedPath = "org.jetbrains.exposed:exposed-"

    additionalRuntimeClasspath(implementation(exposedPath+"core:"+exposedVersion))
    jarJar(exposedPath+"core:"+exposedVersion) {
        transitive = false
        version {
            strictly(exposedRange)
            prefer(exposedVersion)
        }
    }
    additionalRuntimeClasspath(implementation(exposedPath+"dao:"+exposedVersion))
    jarJar(exposedPath+"dao:"+exposedVersion) {
        transitive = false
        version {
            strictly(exposedRange)
            prefer(exposedVersion)
        }
    }
    additionalRuntimeClasspath(implementation(exposedPath+"jdbc:"+exposedVersion))
    jarJar(exposedPath+"jdbc:"+exposedVersion) {
        transitive = false
        version {
            strictly(exposedRange)
            prefer(exposedVersion)
        }
    }

    additionalRuntimeClasspath(implementation(exposedPath+"json:"+exposedVersion))
    jarJar(exposedPath+"json:"+exposedVersion) {
        transitive = false
        version {
            strictly(exposedRange)
            prefer(exposedVersion)
        }
    }


//    additionalRuntimeClasspath(implementation("com.zaxxer:HikariCP:6.3.0"))
//    jarJar("com.zaxxer:HikariCP:6.3.0") {
//        transitive = false
//        version {
//            strictly("[6.3.0,)")
//            prefer("6.3.0")
//        }
//    }


    implementation("thedarkcolour:kfflang-neoforge:5.8.0")
    implementation("thedarkcolour:kfflib-neoforge:5.8.0")
    implementation("thedarkcolour:kffmod-neoforge:5.8.0")

    implementation('io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT')
    implementation "curse.maven:architectury-api-419699:5786327"

}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata

neoForge.ideSyncTask generateModMetadata


publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 21
}

java {
    withSourcesJar()
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
